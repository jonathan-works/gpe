#!/usr/bin/env groovy
def buildParams = [:]

void nexusPublish(String repository, String version, String uploadVersion) {
    def protocol = ("${env.NEXUS_BASE_URL}" =~ /^(?:(https?):\/\/)?(.*)$/)[0][1] ?: 'http'
    def urlWithoutProtocol = ("${env.NEXUS_BASE_URL}" =~ /^(?:(https?):\/\/)?(.*)$/)[0][2]
    nexusArtifactUploader credentialsId: 'nexus-credentials', groupId: env.groupIdDoProjeto,
        nexusUrl: urlWithoutProtocol, nexusVersion: 'nexus3', protocol: protocol,
        repository: repository, version: uploadVersion,
        artifacts: [
            [artifactId: 'epp', file: "epp/jsf-gui/target//epp-${version}.war", type: 'war'],
            [artifactId: 'liquibase-epp', file:"epp/liquibase/target/liquibase-epp-${version}.tar.gz", type:'tar.gz']
        ]
}

pipeline {
    agent none

    triggers {
        cron('0 12 * * *')
    }

    environment {
        projectName = 'ePP Loglab'
        groupIdDoProjeto = 'br.com.loglabdigital'
    }
    options {
        buildDiscarder logRotator(artifactNumToKeepStr: '2')
    }
    stages {
        stage('Compilação, testes unitários, package e deploy para o nexus') {
            agent any
            tools {
                maven 'Maven'
            }
            stages {
                stage('Preparação de versão') {
                    steps {
                        script {
                            def epochSeconds=sh(script:'git log -n 1 --format=\'%ct\'', returnStdout: true)
                            buildParams['maven'] = readMavenModel('epp/bom/pom.xml')
                            buildParams['baseVersion'] = (buildParams.maven.version ?: buildParams.maven.parent.version)
                            def currentVersion = (buildParams.baseVersion =~ /\d+\.\d+\.\d+/)[0]
                            buildParams['version'] = "${currentVersion}-a$epochSeconds".trim()
                        }
                    }
                }
                stage('Compilação, testes unitários') {
                    steps {
                        sh "mvn -s settings.xml -Pbuild:all -Dgit-commit-id-plugin.useGitNative=true -Dmaven.test.failure.ignore -Dsurefire.useFile=false --batch-mode -V -U -e dependency:purge-local-repository clean verify"
                    }
                    post {
                        success {
                            junit allowEmptyResults: true, testResults: '**/target/surefire-reports/TEST-*.xml'

                            recordIssues enabledForFailure: true, tools: [mavenConsole(), java(), javaDoc()]
                        }
                    }
                }
                stage('Validações pós compilação') {
                    steps {
                        sh "mvn -s settings.xml -Pbuild:all --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd"
                    }
                    post {
                        success {
                            recordIssues enabledForFailure: true, tool: checkStyle()
                            recordIssues enabledForFailure: true, tool: cpd(pattern: '**/target/cpd.xml')
                            recordIssues enabledForFailure: true, tool: pmdParser(pattern: '**/target/pmd.xml')
                        }
                    }
                }
                stage('Publicação no nexus') {
                    steps {
                        script {
                            def nomeDoRepositorio = 'infox-maven-stagingarea';
                            def tipoDeBranch='';
                            if ("${BRANCH_NAME}".startsWith("projeto")) {
                               nomeDoRepositorio = 'infox_maven_evo_qa'
                               tipoDeBranch = 'evolução';
                            } else if ("${BRANCH_NAME}".startsWith("incidente")) {
                               nomeDoRepositorio = 'infox_maven_man_qa'
                               tipoDeBranch = 'manutenção';
                            }
                            nexusPublish(nomeDoRepositorio, buildParams.baseVersion, buildParams.version)
                            mail to: 'chamado@infox.com.br', cc: 'laercio@infox.com.br,jonatha@infox.com.br',
                                subject: "Enviar para QA versão de ${tipoDeBranch} ${buildParams.version} do projeto ${env.projectName}",
                                body: """Implantar em ambiente de ${tipoDeBranch} projeto com as seguintes informações
                                
                                Repositório = ${nomeDoRepositorio}
                                
                                WAR
                                Group = ${groupIdDoProjeto}
                                Name = epp
                                Version = ${buildParams.version}
                                extension = war

                                LIQUIBASE
                                Group = ${groupIdDoProjeto}
                                Name = liquibase-epp
                                Version = ${buildParams.version}
                                extension = tar.gz
                                """
                        }
                    }
                }
            }
            post {
                always {
                    deleteDir()
                }
            }
        }
    }

}

