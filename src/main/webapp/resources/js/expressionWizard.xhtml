<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:wi="http://www.itx.com.br/jsf"
                xmlns:a="http://richfaces.org/a4j"
                xmlns:s="http://jboss.com/products/seam/taglib">

<s:div id="#{id}" style="margin:5px">
    <s:div id="#{id}Div" styleClass="expressionDiv"></s:div>
    <wi:inputTextarea id="#{id}Text"
                      styleClass="expressionInput" 
                      label="#{messages['wizardExpressoes.expressao']}"
                      value="#{value}">
        <a:support status=":status"
                   event="onchange" reRender="#{id}"/>
    </wi:inputTextarea>
    
</s:div>
                
<script language="javascript" charset="ISO-8859-1">
//<![CDATA[
(function ExpressionWizard() {
	/* Variables */
	// private 
    var _booleanVariableList = #{nodeFitter.currentNode.getBooleanVariables()};
    var _numberVariableList = #{nodeFitter.currentNode.getNumberVariables()};
    var	_transitionList = #{nodeFitter.currentNode.getLeavingTransitionList()};
	var _expressionDiv;
	var clear = false;
	var _imageSrc = "";
	//public 
	
	/* EVENTS */
	// private 
	var onMouseOverSpan = function(event) {
		var parent = event.currentTarget.parentNode;
		event.currentTarget.style.backgroundColor = "#BBCEC2";
		parent.style.backgroundColor = "#D4F2D6";
		parent.style.padding = "5px 5px 5px 5px";
		parent.style.margin = "-5px 0px 0px -5px";
		parent.style.cursor="pointer";
	};
	
	var onMouseExitSpan = function(event) {
		var parent = event.currentTarget.parentNode;
		event.currentTarget.style.backgroundColor = parent.style.backgroundColor="";
		parent.style.padding=parent.style.margin=parent.style.cursor="";
		
	};
	
	var onMouseClickSpan = function(event) {
		reset(event.currentTarget.parentNode);
	};
	
	var onSelectExpWiz = function(event) {
		var sValue = event.currentTarget.value;
		var pNode = event.currentTarget.parentNode;
		if (sValue != "") {
			clearElement( {"element":pNode} );
		}
		if ((sValue == "||") || (sValue == "&&")) {
			pNode.appendChild( createSpan({"label":"("}));
			pNode.appendChild( booleanSelect() );
			pNode.appendChild( createSpan({"label":sValue}) );
			pNode.appendChild( booleanSelect() );
			pNode.appendChild( createSpan({"label":")"}));
		} else if (sValue == "not") {
			pNode.appendChild( createSpan({"label":"!"}) );
			pNode.appendChild( booleanSelect() );
		} else if (sValue == "operacao") {
			pNode.appendChild( aritOperSelect() );
		} else if (sValue == "num") {
			pNode.appendChild( createSpan({"label": _inputNumber()}) );
		} else if (sValue == "if") {
			pNode.appendChild( createSpan({"label":"("}) );
			_expression(pNode);
			pNode.appendChild( createSpan({"label":")"}) );
		} else if ((sValue == "==") || (sValue == "!=")
				|| (sValue == ">=") || (sValue == ">")
				|| (sValue == "<=") || (sValue == "<")
				|| (sValue == "+") || (sValue == "-")
				|| (sValue == "/") || (sValue == "*")) {
			pNode.appendChild( createSpan({"label":"("}) );
			pNode.appendChild( aritOperSelect() );
			pNode.appendChild( createSpan({"label": sValue }) );
			pNode.appendChild( aritOperSelect() );
			pNode.appendChild( createSpan({"label":")"}) );
		} else {
			pNode.appendChild( createSpan({"label":sValue}) );
		}
		
		if (_expressionDiv.getElementsByTagName("select").length == 0) {
			setTextArea(_expressionDiv.textContent);
		}
		
	};
	// public 
	
	/* CONSTRUCTOR */
	var __constructor = function() {
		_expressionDiv = $j("[id$='#{id}'] [id$='#{id}Div']")[0];
		_imageSrc = "#{util.contextPath}/img/jbpm/wizard.gif";
		
		clearElement( {"element":_expressionDiv} );
		_expressionDiv.appendChild( addImageWiz() );
	}
	
	/* METHODS */
	// private 
	var _inputNumber = function() {
		var _number = ".";
		var _message = "#{messages['expressionWizard.numberPrompt']}";
		while (true) {
			_number = window.prompt(_message, "0");
			_number = _number.replace(".", "");
			_number = _number.replace(",", ".");
			_number = parseFloat(_number);
			if ((!isNaN(_number)) && (isFinite(_number))) {
				break;
			}
			_message = "#{messages['expressionWizard.numberPromptError']}";
		}
		return _number;
	};
	
	var reset = function(element) {
		element.style.backgroundColor="";
		element.style.cursor="";
		if (element.classList.contains("booleanSelect")) {
			clearElement( {"element":element} );
			element.appendChild( booleanSelect() );
		} else if (element.classList.contains("aritOperSelect")) {
			clearElement( {"element":element} );
			element.appendChild( aritOperSelect() );
		} else if (element.classList.contains("conclusionSelect")) {
			clearElement( {"element":element} );
			element.appendChild( conclusionSelect() );
		} else if (element.classList.contains("expressionDiv")) {
			clearElement( {"element":_expressionDiv} );
			_expressionDiv.appendChild( addImageWiz() );
			clear = false;
		}
	};
	
	var clearElement = function(args) {
		var _element = args.element;
		while(_element.childNodes.length > 0) {
			_element.removeChild( _element.firstChild );
		}
	}
	
	var createSpan = function(args) {
		var element = document.createElement("span");
		element.innerHTML = args.label;
		
		if (args.display) {
			element.style.display = args.display;
		}
		element.style.padding = "0px 5px 0px 5px";
		element.onmouseover = args.onmouseover ? args.onmouseover : onMouseOverSpan;
		element.onmouseout = args.onmouseout ? args.onmouseout : onMouseExitSpan;
		element.onclick = args.onclick ? args.onclick : onMouseClickSpan;
	
		return element;
	};
	
	var setTextArea = function(text) {
	    var _inputDiv = $j("[id$='#{id}'] [id$='#{id}Text']")[0];
	    _inputDiv.textContent="#"+"{"+text+"}";
	    _inputDiv["onchange"].call( _inputDiv );
	};
	
	var addOption = function(args) {
		result = document.createElement("option")
		result.value = args.value;
		result.innerHTML = args.label;
		return args.parent.appendChild(result);
	};
	
	var addListToSelectElement = function(args) {
		for(var i=0; i < args.list.length; i++) {
			if (i==0) {
				addOption({value:"", label:"", parent:args.parent});
			}
			item = args.list[i];
			if (args.isTransition) {
				addOption({value:"'"+item+"'", label:item, parent:args.parent});
			} else {
				addOption({value:item, label:item, parent:args.parent});	
			}
		}
	};
	
	var aritOperSelect = function() {
		var parent = document.createElement("div");
		parent.classList.add("aritOperSelect");
		var element = parent.appendChild(document.createElement("select"));
		element.onchange = onSelectExpWiz;
		
		addOption({value:"", label:"#{messages['expressionWizard.aritSelect.null']}", parent:element});
		addOption({value:"+", label:"#{messages['expressionWizard.aritSelect.plus']}", parent:element});
		addOption({value:"-", label:"#{messages['expressionWizard.aritSelect.minus']}", parent:element});
		addOption({value:"*", label:"#{messages['expressionWizard.aritSelect.mult']}", parent:element});
		addOption({value:"/", label:"#{messages['expressionWizard.aritSelect.div']}", parent:element});
		addOption({value:"",label:"",parent:element});
		addOption({value:"num", label:"#{messages['expressionWizard.aritSelect.numb']}", parent:element});
		addListToSelectElement( {list:_numberVariableList, parent:element});
		
		return parent;
	};
	
	var booleanSelect = function() {
		var parent = document.createElement("div");
		parent.classList.add("booleanSelect");
		var element = parent.appendChild(document.createElement("select"));
		element.onchange = onSelectExpWiz;
		
		addOption({value:"", label:"#{messages['expressionWizard.booleanSelect.null']}", parent:element});
		addOption({value:"true", label:"#{messages['expressionWizard.booleanSelect.true']}", parent:element});
		addOption({value:"false", label:"#{messages['expressionWizard.booleanSelect.false']}", parent:element});
		addOption({value:"||", label:"#{messages['expressionWizard.booleanSelect.or']}", parent:element});
		addOption({value:"&&", label:"#{messages['expressionWizard.booleanSelect.and']}", parent:element});
		addOption({value:"not", label:"#{messages['expressionWizard.booleanSelect.not']}", parent:element});
		addOption({value:"", label:"", parent:element});
		addOption({value:"==", label:"#{messages['expressionWizard.booleanSelect.equals']}", parent:element});
		addOption({value:"!=", label:"#{messages['expressionWizard.booleanSelect.notEqual']}", parent:element});
		addOption({value:">=", label:"#{messages['expressionWizard.booleanSelect.gte']}", parent:element});
		addOption({value:">", label:"#{messages['expressionWizard.booleanSelect.gt']}", parent:element});
		addOption({value:"<=", label:"#{messages['expressionWizard.booleanSelect.lte']}", parent:element});
		addOption({value:"<", label:"#{messages['expressionWizard.booleanSelect.lt']}", parent:element});
		addListToSelectElement( {list:_booleanVariableList, parent:element});
	
		return parent;
	};
	
	var conclusionSelect = function() {
		var parent = document.createElement("div");
		parent.classList.add("conclusionSelect");
		var element = parent.appendChild(document.createElement("select"));
		element.onchange = onSelectExpWiz;
		addOption({value:"", label:"#{messages['expressionWizard.condSelect.null']}", parent:element});
		addOption({value:"if", label:"#{messages['expressionWizard.condSelect.cond']}", parent:element});
		addListToSelectElement( {list:_transitionList, parent:element, isTransition:true});
	
		return parent;
	};
	
	var _expression = function(parent) {
		parent.appendChild( booleanSelect() );
		parent.appendChild( createSpan({"label":"?"}) );
		parent.appendChild( conclusionSelect() );
		parent.appendChild( createSpan({"label":":"}) );
		parent.appendChild( conclusionSelect() );
		return parent;
	};
	
	var _initWizard = function() {
		clearElement( {"element":_expressionDiv} );
		if (clear) {
			_expressionDiv.appendChild( addImageWiz() );
			clear = false;
		} else {
			clear = true;
			return _expression(_expressionDiv);	
			
		}
	};
	
	var addImageWiz = function(src) {
		var image = document.createElement("img");
		image.src = _imageSrc;
		image.onclick = _initWizard;
		image.style.cursor = "pointer";
		image.title = "#{messages['wizardExpressoes.title']}";
		return image;
	};
	__constructor();
})();
//]]>
</script>
</ui:composition>