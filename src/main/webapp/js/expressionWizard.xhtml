<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets">

<!-- Injecao do jQuery mais recente para nao conflitar com o jQuery trazido pelo richfaces -->
<script type="text/javascript">var $rfjquery = jQuery.noConflict();</script>
<script type="text/javascript" src="#{util.contextPath}/js/jquery-1.8.3.js"></script>

<!-- Codigo do Wizard -->
<script language="javascript" charset="ISO-8859-1">
nj = jQuery.noConflict();
$ = $rfjquery;
//<![CDATA[
var booleanVariableList=new Array();
var numberVariableList=new Array();
var transitionList=new Array();
var inputId;

function setInputId(id)	{
	inputId = id;
}

function initVariableList() {
	booleanVariableList.clear();
	numberVariableList.clear();
	transitionList.clear();
	booleanVariableList = #{processBuilder.currentNode.getBooleanVariables()};
	numberVariableList = #{processBuilder.currentNode.getNumberVariables()};
	transitionList = #{processBuilder.currentNode.getLeavingTransitionList()};
}

function getNumber() {
	var valor = ".";
	while (true) {
		valor = window.prompt("#{messages['expressionWizard.numberPrompt']}", "0");
		valor = valor.replace(".", "");
		valor = valor.replace(",", ".");
		valor = parseFloat(valor);
		if ((!isNaN(valor)) && (isFinite(valor))) {
			break;
		}
	}
	return valor;
}

function reset(element) {
	if (element.hasClass("booleanSelect")) {
		element.html(booleanSelect());
	} else if (element.hasClass("aritOperSelect")) {
		element.html(aritOperSelect());
	} else if (element.hasClass("conclusionSelect")) {
		element.html(conclusionSelect());
	}
}

function spanLink(label) {
	parent = document.createElement("div");
	element = parent.appendChild(document.createElement("span"));
	element.innerHTML = label;
	element.setAttribute("href", "javascript:void(0)");

	return parent.innerHTML;
}

function setTextArea(text) {
	nj("*[id$='"+inputId+"']").html("#"+"{"+text+"}");
}

function onSelectExpWiz(selected) {
	pNode = selected.parentNode;
	if (selected.value == "") {
	} else if (selected.value == "or") {
		selected.parentNode.innerHTML = spanLink("( ") + booleanSelect()
				+ spanLink(" || ") + booleanSelect() + spanLink(" )");
	} else if (selected.value == "and") {
		selected.parentNode.innerHTML = spanLink("( ") + booleanSelect()
				+ spanLink(" && ") + booleanSelect() + spanLink(" )");
	} else if (selected.value == "not") {
		selected.parentNode.innerHTML = spanLink("!") + booleanSelect();
	} else if (selected.value == "operacao") {
		selected.parentNode.innerHTML = aritOperSelect();
	} else if (selected.value == "num") {
		selected.parentNode.innerHTML = spanLink(getNumber());
	} else if (selected.value == "if") {
		selected.parentNode.innerHTML = spanLink("( ") + booleanSelect()
				+ spanLink(" ? ") + conclusionSelect() + spanLink(" : ")
				+ conclusionSelect() + spanLink(" )");
	} else if ((selected.value == "==") || (selected.value == "!=")
			|| (selected.value == ">=") || (selected.value == ">")
			|| (selected.value == "<=") || (selected.value == "<")
			|| (selected.value == "+") || (selected.value == "-")
			|| (selected.value == "/") || (selected.value == "*")) {
		selected.parentNode.innerHTML = spanLink("( ") + aritOperSelect()
				+ spanLink(" " + selected.value + " ") + aritOperSelect()
				+ spanLink(" )");
	} else {
		selected.parentNode.innerHTML = spanLink(selected.value);
	}
	
	nj(".expressionDiv span").click(function() {
		nj(this).parent().css("background-color", "");
		nj(this).parent().css("cursor", "");
		reset(nj(this).parent());
	});
	nj(".expressionDiv span").hover(function() {
		nj(this).parent().css("background-color", "grey");
		nj(this).parent().css("cursor", "pointer");
	}, function() {
		nj(this).parent().css("background-color", "");
		nj(this).parent().css("cursor", "");
	});
	jNode = nj(pNode).parents().filter(".expressionDiv");
	
	if (jNode.find("select").size() == 0) {
		setTextArea(jNode.text());
	}
}

function addOption(value, label, parentNode) {
	result = document.createElement("option")
	result.value = value;
	result.innerHTML = label;
	return parentNode.appendChild(result);
}

function aritOperSelect() {
	parent = document.createElement("div");
	element = parent.appendChild(document.createElement("div"));
	element.setAttribute("class", "aritOperSelect");
	element = element.appendChild(document.createElement("select"));
	element.setAttribute("onchange", "onSelectExpWiz(this)");
	
	addOption("", "#{messages['expressionWizard.aritSelect.null']}", element);
	addOption("+", "#{messages['expressionWizard.aritSelect.plus']}", element);
	addOption("-", "#{messages['expressionWizard.aritSelect.minus']}", element);
	addOption("*", "#{messages['expressionWizard.aritSelect.mult']}", element);
	addOption("/", "#{messages['expressionWizard.aritSelect.div']}", element);
	addOption("","",element);
	addOption("num", "#{messages['expressionWizard.aritSelect.numb']}", element);
	addOption("","",element);
	for(var i=0; i < numberVariableList.length; i++) {
		item = numberVariableList[i];
		addOption(item, "  "+item, element);
	}
	return parent.innerHTML;
}

function booleanSelect() {
	parent = document.createElement("div");
	element = parent.appendChild(document.createElement("div"));
	element.setAttribute("class", "booleanSelect");
	element = element.appendChild(document.createElement("select"));
	element.setAttribute("onchange", "onSelectExpWiz(this)");

	addOption("", "#{messages['expressionWizard.booleanSelect.null']}", element);
	addOption("true", "#{messages['expressionWizard.booleanSelect.true']}", element);
	addOption("false", "#{messages['expressionWizard.booleanSelect.false']}", element);
	addOption("or", "#{messages['expressionWizard.booleanSelect.or']}", element);
	addOption("and", "#{messages['expressionWizard.booleanSelect.and']}", element);
	addOption("not", "#{messages['expressionWizard.booleanSelect.not']}", element);
	addOption("", "", element);
	addOption("==", "#{messages['expressionWizard.booleanSelect.equals']}", element);
	addOption("!=", "#{messages['expressionWizard.booleanSelect.notEqual']}", element);
	addOption(">=", "#{messages['expressionWizard.booleanSelect.gte']}", element);
	addOption(">", "#{messages['expressionWizard.booleanSelect.gt']}", element);
	addOption("<=", "#{messages['expressionWizard.booleanSelect.lte']}", element);
	addOption("<", "#{messages['expressionWizard.booleanSelect.lt']}", element);
	addOption("", "", element);
	for(var i=0; i < booleanVariableList.length; i++) {
		item = booleanVariableList[i];
		addOption(item, item, element);
	}

	return parent.innerHTML;
}

function conclusionSelect() {
	parent = document.createElement("div");
	element = parent.appendChild(document.createElement("div"));
	element.setAttribute("class", "conclusionSelect");
	element = element.appendChild(document.createElement("select"));
	element.setAttribute("onchange", "onSelectExpWiz(this)");

	addOption("", "#{messages['expressionWizard.condSelect.null']}", element);
	addOption("if", "#{messages['expressionWizard.condSelect.cond']}", element);
	addOption("","",element);
	for(var i=0; i < transitionList.length; i++) {
		item = transitionList[i];
		addOption("'"+item+"'", item, element);
	}

	return parent.innerHTML;
}

function initialExpression() {
	initVariableList();
	return booleanSelect() + " ? " + conclusionSelect() + " : "
			+ conclusionSelect();
}

function initExpressions() {
	nj(".expressionDiv").html(initialExpression());
}
//]]>
</script>
</ui:composition>