<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets">
<script language="javascript" charset="ISO-8859-1">
//<![CDATA[
           
function ExpressionWizard(args) {
	/* Variables */
	// private 
	var _booleanVariableList=new Array();
	var _numberVariableList=new Array();
	var _transitionList=new Array();
	var _inputDiv;
	var _expressionDiv;
	var clear = false;
	var _imageSrc = "";
	//public 
	
	/* EVENTS */
	// private 
	var onMouseOverSpan = function(event) {
		var parent = event.currentTarget.parentNode;
		event.currentTarget.style.backgroundColor = "#bbcec2";
		parent.style.backgroundColor = "#D4F2D6";
		parent.style.cursor="pointer";
	};
	
	var onMouseExitSpan = function(event) {
		var parent = event.currentTarget.parentNode;
		event.currentTarget.style.backgroundColor = parent.style.backgroundColor="";
		parent.style.cursor="";
	};
	
	var onMouseClickSpan = function(event) {
		reset(event.currentTarget.parentNode);
	};
	
	var onSelectExpWiz = function(event) {
		var sValue = event.currentTarget.value;
		var pNode = event.currentTarget.parentNode;
		if (sValue != "") {
			clearElement( {"element":pNode} );
		}
		if ((sValue == "||") || (sValue == "&&")) {
			pNode.appendChild( createSpan({"label":"( "}));
			pNode.appendChild( booleanSelect() );
			pNode.appendChild( createSpan({"label":" " + sValue + " "}) );
			pNode.appendChild( booleanSelect() );
			pNode.appendChild( createSpan({"label":" )"}));
		} else if (sValue == "not") {
			pNode.appendChild( createSpan({"label":"!"}) );
			pNode.appendChild( booleanSelect() );
		} else if (sValue == "operacao") {
			pNode.appendChild( aritOperSelect() );
		} else if (sValue == "num") {
			pNode.appendChild( createSpan({"label": _inputNumber()}) );
		} else if (sValue == "if") {
			pNode.appendChild( createSpan({"label":"( "}) );
			_expression(pNode);
			pNode.appendChild( createSpan({"label":" )"}) );
		} else if ((sValue == "==") || (sValue == "!=")
				|| (sValue == ">=") || (sValue == ">")
				|| (sValue == "<=") || (sValue == "<")
				|| (sValue == "+") || (sValue == "-")
				|| (sValue == "/") || (sValue == "*")) {
			pNode.appendChild( createSpan({"label":"( "}) );
			pNode.appendChild( aritOperSelect() );
			pNode.appendChild( createSpan({"label":" " + sValue + " "}) );
			pNode.appendChild( aritOperSelect() );
			pNode.appendChild( createSpan({"label":" )"}) );
		} else {
			pNode.appendChild( createSpan({"label":sValue}) );
		}
		
		if (_expressionDiv.getElementsByTagName("select").length == 0) {
			setTextArea(_expressionDiv.textContent);
		}
		
	};
	// public 
	
	/* CONSTRUCTOR */
	var __constructor = function(args) {
		if (args) {
			_expressionDiv = document.getElementById(args.expressionId);
			_inputDiv = document.getElementById(args.inputId);
			_imageSrc = args.imageSrc;
			
			clearElement( {"element":_expressionDiv} );
			_expressionDiv.appendChild( addImageWiz() );
		}
	}
	
	/* METHODS */
	// private 
	var initVariableList = function() {
		_booleanVariableList.clear();
		_numberVariableList.clear();
		_transitionList.clear();
		_booleanVariableList = #{nodeFitter.currentNode.getBooleanVariables()};
		_numberVariableList = #{nodeFitter.currentNode.getNumberVariables()};
		_transitionList = #{nodeFitter.currentNode.getLeavingTransitionList()};
	};
	
	var _inputNumber = function() {
		var _number = ".";
		var _message = "#{messages['expressionWizard.numberPrompt']}";
		while (true) {
			_number = window.prompt(_message, "0");
			_number = _number.replace(".", "");
			_number = _number.replace(",", ".");
			_number = parseFloat(_number);
			if ((!isNaN(_number)) && (isFinite(_number))) {
				break;
			}
			_message = "#{messages['expressionWizard.numberPromptError']}";
		}
		return _number;
	};
	
	var reset = function(element) {
		element.style.backgroundColor="";
		element.style.cursor="";
		if (element.classList.contains("booleanSelect")) {
			clearElement( {"element":element} );
			element.appendChild( booleanSelect() );
		} else if (element.classList.contains("aritOperSelect")) {
			clearElement( {"element":element} );
			element.appendChild( aritOperSelect() );
		} else if (element.classList.contains("conclusionSelect")) {
			clearElement( {"element":element} );
			element.appendChild( conclusionSelect() );
		} else if (element.classList.contains("expressionDiv")) {
			clearElement( {"element":_expressionDiv} );
			_expressionDiv.appendChild( addImageWiz() );
			clear = false;
		}
	};
	
	var clearElement = function(args) {
		var _element = args.element;
		while(_element.childNodes.length > 0) {
			_element.removeChild( _element.firstChild );
		}
	}
	
	var createSpan = function(args) {
		var element = document.createElement("span");
		element.innerHTML = args.label;
		
		if (args.display) {
			element.style.display = args.display;
		}
		element.onmouseover = args.onmouseover ? args.onmouseover : onMouseOverSpan;
		element.onmouseout = args.onmouseout ? args.onmouseout : onMouseExitSpan;
		element.onclick = args.onclick ? args.onclick : onMouseClickSpan;
	
		return element;
	};
	
	var setTextArea = function(text) {
		_inputDiv.innerHTML="#"+"{"+text+"}";
		if (_inputDiv.onchange) {
			_inputDiv.onchange();
		}
	};
	
	var addOption = function(value, label, parentNode) {
		result = document.createElement("option")
		result.value = value;
		result.innerHTML = label;
		return parentNode.appendChild(result);
	};
	
	var addListToSelectElement = function(list, element, transition) {
		for(var i=0; i < list.length; i++) {
			if (i==0) {
				addOption("", "", element);
			}
			item = list[i];
			if (transition) {
				addOption("'"+item+"'", item, element);
			} else {
				addOption(item, item, element);	
			}
		}
	};
	
	var OptionLabel = function(args) {
		var label = args.label;
		var value = args.value;
	};
	
	var aritOperSelect = function() {
		var parent = document.createElement("div");
		parent.classList.add("aritOperSelect");
		var element = parent.appendChild(document.createElement("select"));
		element.onchange = onSelectExpWiz;
		
		addOption("", "#{messages['expressionWizard.aritSelect.null']}", element);
		addOption("+", "#{messages['expressionWizard.aritSelect.plus']}", element);
		addOption("-", "#{messages['expressionWizard.aritSelect.minus']}", element);
		addOption("*", "#{messages['expressionWizard.aritSelect.mult']}", element);
		addOption("/", "#{messages['expressionWizard.aritSelect.div']}", element);
		addOption("","",element);
		addOption("num", "#{messages['expressionWizard.aritSelect.numb']}", element);
		addListToSelectElement( _numberVariableList, element);
		
		return parent;
	};
	
	var booleanSelect = function() {
		var parent = document.createElement("div");
		parent.classList.add("booleanSelect");
		var element = parent.appendChild(document.createElement("select"));
		element.onchange = onSelectExpWiz;
		
		addOption("", "#{messages['expressionWizard.booleanSelect.null']}", element);
		addOption("true", "#{messages['expressionWizard.booleanSelect.true']}", element);
		addOption("false", "#{messages['expressionWizard.booleanSelect.false']}", element);
		addOption("||", "#{messages['expressionWizard.booleanSelect.or']}", element);
		addOption("&&", "#{messages['expressionWizard.booleanSelect.and']}", element);
		addOption("not", "#{messages['expressionWizard.booleanSelect.not']}", element);
		addOption("", "", element);
		addOption("==", "#{messages['expressionWizard.booleanSelect.equals']}", element);
		addOption("!=", "#{messages['expressionWizard.booleanSelect.notEqual']}", element);
		addOption(">=", "#{messages['expressionWizard.booleanSelect.gte']}", element);
		addOption(">", "#{messages['expressionWizard.booleanSelect.gt']}", element);
		addOption("<=", "#{messages['expressionWizard.booleanSelect.lte']}", element);
		addOption("<", "#{messages['expressionWizard.booleanSelect.lt']}", element);
		addListToSelectElement( _booleanVariableList, element);
	
		return parent;
	};
	
	var conclusionSelect = function() {
		var parent = document.createElement("div");
		parent.classList.add("conclusionSelect");
		var element = parent.appendChild(document.createElement("select"));
		element.onchange = onSelectExpWiz;
		addOption("", "#{messages['expressionWizard.condSelect.null']}", element);
		addOption("if", "#{messages['expressionWizard.condSelect.cond']}", element);
		addListToSelectElement( _transitionList, element, true);
	
		return parent;
	};
	
	var _expression = function(parent) {
		parent.appendChild( booleanSelect() );
		parent.appendChild( createSpan({"label":" ? "}) );
		parent.appendChild( conclusionSelect() );
		parent.appendChild( createSpan({"label":" : "}) );
		parent.appendChild( conclusionSelect() );
		return parent;
	};
	
	var _initWizard = function() {
		clearElement( {"element":_expressionDiv} );
		if (clear) {
			_expressionDiv.appendChild( addImageWiz() );
			clear = false;
		} else {
			clear = true;
			initVariableList();
			return _expression(_expressionDiv);	
			
		}
	};
	
	var addImageWiz = function(src) {
		var image = document.createElement("img");
		image.src = _imageSrc;
		image.onclick = _initWizard;
		image.style.cursor = "pointer";
		image.title = "Wizard de Expressões";
		return image;
	};
	
	__constructor(args);
}

new ExpressionWizard({	"expressionId":"#{expressionId}",
						"inputId":"#{inputId}",
						"imageSrc":"#{imageSrc}"});
//]]>
</script>
</ui:composition>